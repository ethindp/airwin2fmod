cmake_minimum_required(VERSION 3.14)
project(autogen)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_C_STANDARD 17)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreadedDebugDll")
else()
  set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreadedDll")
endif()
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake"
     "${CMAKE_SOURCE_DIR}/cmake/modules")
include(harden-target) # your existing helper
include(CheckIPOSupported)
find_package(Threads REQUIRED)
find_package(FMOD MODULE REQUIRED)
if(NOT TARGET airwin-registry)
  add_subdirectory("${CMAKE_SOURCE_DIR}/external/airwin2rack"
                   "${CMAKE_BINARY_DIR}/external/airwin2rack-build")
endif()
add_library(plugin_iface INTERFACE)
target_compile_features(plugin_iface INTERFACE cxx_std_20)
target_include_directories(
  plugin_iface INTERFACE "$<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}>"
                         "$<INSTALL_INTERFACE:include>")
target_compile_definitions(
  plugin_iface
  INTERFACE
    "$<$<PLATFORM_ID:Windows>:NOMINMAX>"
    "$<$<PLATFORM_ID:Windows>:_CRT_SECURE_NO_WARNINGS>"
    "$<$<PLATFORM_ID:Windows>:_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES=1>"
    "$<$<PLATFORM_ID:Windows>:_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT=1>")
target_compile_options(plugin_iface
                       INTERFACE "$<$<CXX_COMPILER_ID:MSVC>:/utf-8;/bigobj>")
target_link_options(
  plugin_iface INTERFACE
  "$<$<AND:$<PLATFORM_ID:Windows>,$<CXX_COMPILER_ID:MSVC>>:/STACK:8388608>")
target_link_libraries(plugin_iface INTERFACE Threads::Threads FMOD::FMOD
                                             airwin-registry)
function(add_airwindows_plugin plugin_name)
  add_library(${plugin_name} SHARED ${ARGN})
  set_property(TARGET ${plugin_name} PROPERTY OUTPUT_NAME ${plugin_name})
  target_link_libraries(${plugin_name} PRIVATE plugin_iface)
  if(CMAKE_BUILD_TYPE STREQUAL "Debug" AND NOT CMAKE_CXX_COMPILER_ID MATCHES
                                           "MSVC")
    find_program(CLANG_TIDY_EXE NAMES "clang-tidy")
    if(CLANG_TIDY_EXE)
      set_target_properties(
        ${plugin_name}
        PROPERTIES
          CXX_CLANG_TIDY
          "${CLANG_TIDY_EXE};-checks=-*,bugprone-*,clang-*,concurrency-*,modernize-*,performance-*"
      )
    endif()
  endif()
  check_ipo_supported()
  set_property(TARGET ${plugin_name} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
  harden_target(${plugin_name})
  install(FILES "$<TARGET_FILE:${plugin_name}>" DESTINATION ".")
endfunction()

## for plugin in plugins
message(STATUS "Configuring {{plugin.name}}")
add_subdirectory({{plugin.name}})
## endfor
