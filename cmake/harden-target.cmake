cmake_minimum_required(VERSION 3.30)

include(CheckCXXCompilerFlag)
include(CheckLinkerFlag)

function(_add_cflag_if tgt scope flag)
  string(MAKE_C_IDENTIFIER "${flag}" _var)
  set(_var "HAS_${_var}")
  check_cxx_compiler_flag("${flag}" ${_var})
  if(${_var})
    target_compile_options(${tgt} ${scope} "${flag}")
  endif()
endfunction()

function(_add_ldflag_if tgt flag)
  string(MAKE_C_IDENTIFIER "${flag}" _var)
  set(_var "HAS_LD_${_var}")
  check_linker_flag(CXX "${flag}" ${_var})
  if(${_var})
    target_link_options(${tgt} PRIVATE "${flag}")
  endif()
endfunction()

# Options:
#   SCOPE <PRIVATE|PUBLIC>     -- propagation of compile options (default PRIVATE)
#   WARNINGS <ON|OFF>          -- add common warning sets (default ON for GNU/Clang, /W4 /sdl for MSVC)
#   SANITIZERS <ASAN;UBSAN;...>-- list; empty = off
#   FORTIFY <0|1|2|3>          -- glibc fortify level on ELF (default 3 if possible)
#   PIE <AUTO|ON|OFF>          -- position independent executable on ELF (default AUTO)
#   RELRO <AUTO|FULL|PARTIAL|OFF> -- default AUTO
#   SPECTRE <AUTO|ON|OFF>      -- /Qspectre (MSVC)/-mspeculative-load-hardening (Clang) if supported
function(harden_target tgt)
  if (NOT TARGET ${tgt})
    message(FATAL_ERROR "harden_target: target '${tgt}' does not exist")
  endif()

  set(options)
  set(oneValueArgs SCOPE FORTIFY PIE RELRO SPECTRE WARNINGS)
  set(multiValueArgs SANITIZERS)
  cmake_parse_arguments(H "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

  if (NOT H_SCOPE)
    set(H_SCOPE PRIVATE)
  endif()
  if (NOT H_WARNINGS)
    set(H_WARNINGS ON)
  endif()
  if (NOT H_PIE)
    set(H_PIE AUTO)
  endif()
  if (NOT H_RELRO)
    set(H_RELRO AUTO)
  endif()
  if (NOT H_SPECTRE)
    set(H_SPECTRE AUTO)
  endif()
  set(IS_MSVC_STYLE OFF)
  if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC" OR
      CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "MSVC")
    set(IS_MSVC_STYLE ON)
  endif()
  if (H_WARNINGS)
    if (IS_MSVC_STYLE)
      _add_cflag_if(${tgt} ${H_SCOPE} "/W4")
      _add_cflag_if(${tgt} ${H_SCOPE} "/permissive-")
      _add_cflag_if(${tgt} ${H_SCOPE} "/sdl")  # extra safety diagnostics
      _add_cflag_if(${tgt} ${H_SCOPE} "/Zc:inline")
    else()
      _add_cflag_if(${tgt} ${H_SCOPE} "-Wall")
      _add_cflag_if(${tgt} ${H_SCOPE} "-Wextra")
      _add_cflag_if(${tgt} ${H_SCOPE} "-Wpedantic")
      _add_cflag_if(${tgt} ${H_SCOPE} "-Wformat=2")
    endif()
  endif()
  if (WIN32)
    if (IS_MSVC_STYLE)
      _add_ldflag_if(${tgt} "/NXCOMPAT")
      _add_ldflag_if(${tgt} "/DYNAMICBASE")
      _add_ldflag_if(${tgt} "/HIGHENTROPYVA")
      _add_ldflag_if(${tgt} "/GUARD:CF")
      _add_ldflag_if(${tgt} "/CETCOMPAT")
    else()
      _add_ldflag_if(${tgt} "-Wl,-nxcompat")
      _add_ldflag_if(${tgt} "-Wl,-dynamicbase")
      _add_ldflag_if(${tgt} "-Wl,-highentropyva")
      _add_ldflag_if(${tgt} "-Wl,-guard:cf")
    endif()
  else()
    _add_cflag_if(${tgt} ${H_SCOPE} "-fstack-protector-strong")
    if (NOT H_FORTIFY)
      set(H_FORTIFY 3)
    endif()
    if (H_FORTIFY GREATER 0)
      target_compile_definitions(${tgt} ${H_SCOPE} "_FORTIFY_SOURCE=${H_FORTIFY}")
    endif()
    if (H_PIE STREQUAL "ON" OR H_PIE STREQUAL "AUTO")
      _add_cflag_if(${tgt} ${H_SCOPE} "-fPIE")
      _add_ldflag_if(${tgt} "-pie")
    endif()
    if (H_RELRO STREQUAL "FULL" OR H_RELRO STREQUAL "AUTO")
      _add_ldflag_if(${tgt} "-Wl,-z,relro")
      _add_ldflag_if(${tgt} "-Wl,-z,now")
    elseif(H_RELRO STREQUAL "PARTIAL")
      _add_ldflag_if(${tgt} "-Wl,-z,relro")
    endif()
    _add_ldflag_if(${tgt} "-Wl,-z,noexecstack")
    _add_ldflag_if(${tgt} "-Wl,-z,separate-code")
  endif()
  if (H_SPECTRE STREQUAL "ON" OR H_SPECTRE STREQUAL "AUTO")
    if (IS_MSVC_STYLE)
      _add_cflag_if(${tgt} ${H_SCOPE} "/Qspectre")
    else()
      _add_cflag_if(${tgt} ${H_SCOPE} "-mspeculative-load-hardening")
    endif()
  endif()
  if (H_SANITIZERS)
    if (IS_MSVC_STYLE)
      foreach(san IN LISTS H_SANITIZERS)
        if (san STREQUAL "ASAN")
          _add_cflag_if(${tgt} ${H_SCOPE} "-fsanitize=address")
          _add_ldflag_if(${tgt} "-fsanitize=address")
        elseif(san STREQUAL "UBSAN")
          _add_cflag_if(${tgt} ${H_SCOPE} "-fsanitize=undefined")
          _add_ldflag_if(${tgt} "-fsanitize=undefined")
        endif()
      endforeach()
    else()
      string(JOIN "," _san "${H_SANITIZERS}")
      _add_cflag_if(${tgt} ${H_SCOPE} "-fsanitize=${_san}")
      _add_ldflag_if(${tgt} "-fsanitize=${_san}")
      _add_cflag_if(${tgt} ${H_SCOPE} "-fno-omit-frame-pointer")
    endif()
  endif()
endfunction()
